substitutions:

  ############################################################################
  # configuration substitutions

  # defines whether current color will be saved to the config light entity.
  save_on_state: 'true'
  save_off_state: 'true'

  # initial_delay is hold time to first change, change_delay is hold time between subsequent changes.
  initial_delay: 750ms
  change_delay:  750ms

  # colors to rotate through, needs to be 3 comma-separated float values r,g,b
  color_0:  '1.0f, 0.0f, 0.0f'  # red
  color_1:  '1.0f, 0.5f, 0.0f'
  color_2:  '1.0f, 1.0f, 0.0f'
  color_3:  '0.5f, 1.0f, 0.0f'
  color_4:  '0.0f, 1.0f, 0.0f'  # green
  color_5:  '0.0f, 1.0f, 0.5f'
  color_6:  '0.0f, 1.0f, 1.0f'
  color_7:  '0.0f, 0.5f, 1.0f'
  color_8:  '0.0f, 0.0f, 1.0f'  # blue
  color_9:  '0.5f, 0.0f, 1.0f'
  color_10: '1.0f, 0.0f, 1.0f'
  color_11: '1.0f, 0.0f, 0.5f'

  # we have to disable button toggling on press, so the configuration switch no longer works.
  # if you still want button disabled for toggling, redefine this to false.
  still_toggle: 'true'

  ############################################################################
  # substitutions to implement functionality, do not change
  sub_on_press:   script_on_press
  sub_on_release: script_on_release


globals:
  - id: current_color
    type: int
    restore_value: no
    initial_value: '999'


esphome:
  on_boot:
    then:
      - switch.turn_on: disable_button


script:

  - id: script_on_press
    then:
      - delay: $initial_delay
      - script.execute: script_change_color

  - id: script_on_release
    then:
      - if:
          condition:
            - script.is_running: script_on_press
          then:
            - script.stop: script_on_press
            - lambda: if ($still_toggle) id(ui_switch).toggle();


  - id: script_change_color
    mode: queued
    then:
      - lambda: |-

          auto call = id(big_light).turn_on();

          // use config light instead if enabled
          if ( $save_on_state &&  id(ui_switch).state) call = id(big_light_on).turn_on();
          if ( $save_off_state && !id(ui_switch).state) call = id(big_light_off).turn_on();

          if      ( id(current_color) == 0)  call.set_rgb($color_1);
          else if ( id(current_color) == 1)  call.set_rgb($color_2);
          else if ( id(current_color) == 2)  call.set_rgb($color_3);
          else if ( id(current_color) == 3)  call.set_rgb($color_4);
          else if ( id(current_color) == 4)  call.set_rgb($color_5);
          else if ( id(current_color) == 5)  call.set_rgb($color_6);
          else if ( id(current_color) == 6)  call.set_rgb($color_7);
          else if ( id(current_color) == 7)  call.set_rgb($color_8);
          else if ( id(current_color) == 8)  call.set_rgb($color_9);
          else if ( id(current_color) == 9)  call.set_rgb($color_10);
          else if ( id(current_color) == 10) call.set_rgb($color_11);
          else                               call.set_rgb($color_0);

          id(current_color)++;
          if ( id(current_color) > 11) id(current_color) = 0;

          call.perform();

      - delay: $change_delay

      - if:
          condition:
            - binary_sensor.is_on: main_button
          then:
            - script.execute: script_change_color
